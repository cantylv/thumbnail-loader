// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package entity

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson163c17a9DecodeGithubComCantylvThumbnailLoaderInternalEntity(in *jlexer.Lexer, out *ThumbnailType) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "default":
			(out.Default).UnmarshalEasyJSON(in)
		case "medium":
			(out.Medium).UnmarshalEasyJSON(in)
		case "high":
			(out.High).UnmarshalEasyJSON(in)
		case "standard":
			(out.Standard).UnmarshalEasyJSON(in)
		case "maxres":
			(out.Maxres).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson163c17a9EncodeGithubComCantylvThumbnailLoaderInternalEntity(out *jwriter.Writer, in ThumbnailType) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"default\":"
		out.RawString(prefix[1:])
		(in.Default).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"medium\":"
		out.RawString(prefix)
		(in.Medium).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"high\":"
		out.RawString(prefix)
		(in.High).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"standard\":"
		out.RawString(prefix)
		(in.Standard).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"maxres\":"
		out.RawString(prefix)
		(in.Maxres).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ThumbnailType) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson163c17a9EncodeGithubComCantylvThumbnailLoaderInternalEntity(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ThumbnailType) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson163c17a9DecodeGithubComCantylvThumbnailLoaderInternalEntity(l, v)
}
func easyjson163c17a9DecodeGithubComCantylvThumbnailLoaderInternalEntity1(in *jlexer.Lexer, out *ThumbnailBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "url":
			out.Url = string(in.String())
		case "width":
			out.Width = uint16(in.Uint16())
		case "height":
			out.Height = uint16(in.Uint16())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson163c17a9EncodeGithubComCantylvThumbnailLoaderInternalEntity1(out *jwriter.Writer, in ThumbnailBody) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix[1:])
		out.String(string(in.Url))
	}
	{
		const prefix string = ",\"width\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Width))
	}
	{
		const prefix string = ",\"height\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Height))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ThumbnailBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson163c17a9EncodeGithubComCantylvThumbnailLoaderInternalEntity1(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ThumbnailBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson163c17a9DecodeGithubComCantylvThumbnailLoaderInternalEntity1(l, v)
}
func easyjson163c17a9DecodeGithubComCantylvThumbnailLoaderInternalEntity2(in *jlexer.Lexer, out *SnippetData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "title":
			out.Title = string(in.String())
		case "thumbnails":
			(out.Thumbnails).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson163c17a9EncodeGithubComCantylvThumbnailLoaderInternalEntity2(out *jwriter.Writer, in SnippetData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix[1:])
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"thumbnails\":"
		out.RawString(prefix)
		(in.Thumbnails).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SnippetData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson163c17a9EncodeGithubComCantylvThumbnailLoaderInternalEntity2(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SnippetData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson163c17a9DecodeGithubComCantylvThumbnailLoaderInternalEntity2(l, v)
}
func easyjson163c17a9DecodeGithubComCantylvThumbnailLoaderInternalEntity3(in *jlexer.Lexer, out *Response) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]Item, 0, 0)
					} else {
						out.Items = []Item{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Item
					(v1).UnmarshalEasyJSON(in)
					out.Items = append(out.Items, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson163c17a9EncodeGithubComCantylvThumbnailLoaderInternalEntity3(out *jwriter.Writer, in Response) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"items\":"
		out.RawString(prefix[1:])
		if in.Items == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Items {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Response) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson163c17a9EncodeGithubComCantylvThumbnailLoaderInternalEntity3(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Response) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson163c17a9DecodeGithubComCantylvThumbnailLoaderInternalEntity3(l, v)
}
func easyjson163c17a9DecodeGithubComCantylvThumbnailLoaderInternalEntity4(in *jlexer.Lexer, out *Item) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "snippet":
			(out.Snippet).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson163c17a9EncodeGithubComCantylvThumbnailLoaderInternalEntity4(out *jwriter.Writer, in Item) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"snippet\":"
		out.RawString(prefix[1:])
		(in.Snippet).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Item) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson163c17a9EncodeGithubComCantylvThumbnailLoaderInternalEntity4(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Item) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson163c17a9DecodeGithubComCantylvThumbnailLoaderInternalEntity4(l, v)
}
